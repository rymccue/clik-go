// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Image represents a row from 'public.images'.
type Image struct {
	UserID    int          `json:"user_id"`    // user_id
	Index     int          `json:"index"`      // index
	Small     sql.NullBool `json:"small"`      // small
	URL       string       `json:"url"`        // url
	CreatedAt pq.NullTime  `json:"created_at"` // created_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Image exists in the database.
func (i *Image) Exists() bool {
	return i._exists
}

// Deleted provides information if the Image has been deleted from the database.
func (i *Image) Deleted() bool {
	return i._deleted
}

// Insert inserts the Image to the database.
func (i *Image) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if i._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.images (` +
		`user_id, index, small, url, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`

	// run query
	XOLog(sqlstr, i.UserID, i.Index, i.Small, i.URL, i.CreatedAt)
	err = db.QueryRow(sqlstr, i.UserID, i.Index, i.Small, i.URL, i.CreatedAt).Scan(&i.Index)
	if err != nil {
		return err
	}

	// set existence
	i._exists = true

	return nil
}

// Update updates the Image in the database.
func (i *Image) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !i._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if i._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.images SET (` +
		`user_id, small, url, created_at` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE index = $5`

	// run query
	XOLog(sqlstr, i.UserID, i.Small, i.URL, i.CreatedAt, i.Index)
	_, err = db.Exec(sqlstr, i.UserID, i.Small, i.URL, i.CreatedAt, i.Index)
	return err
}

// Save saves the Image to the database.
func (i *Image) Save(db XODB) error {
	if i.Exists() {
		return i.Update(db)
	}

	return i.Insert(db)
}

// Upsert performs an upsert for Image.
//
// NOTE: PostgreSQL 9.5+ only
func (i *Image) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if i._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.images (` +
		`user_id, index, small, url, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (index) DO UPDATE SET (` +
		`user_id, index, small, url, created_at` +
		`) = (` +
		`EXCLUDED.user_id, EXCLUDED.index, EXCLUDED.small, EXCLUDED.url, EXCLUDED.created_at` +
		`)`

	// run query
	XOLog(sqlstr, i.UserID, i.Index, i.Small, i.URL, i.CreatedAt)
	_, err = db.Exec(sqlstr, i.UserID, i.Index, i.Small, i.URL, i.CreatedAt)
	if err != nil {
		return err
	}

	// set existence
	i._exists = true

	return nil
}

// Delete deletes the Image from the database.
func (i *Image) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !i._exists {
		return nil
	}

	// if deleted, bail
	if i._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.images WHERE index = $1`

	// run query
	XOLog(sqlstr, i.Index)
	_, err = db.Exec(sqlstr, i.Index)
	if err != nil {
		return err
	}

	// set deleted
	i._deleted = true

	return nil
}

// User returns the User associated with the Image's UserID (user_id).
//
// Generated from foreign key 'images_user_id_fkey'.
func (i *Image) User(db XODB) (*User, error) {
	return UserByID(db, i.UserID)
}

// ImageByUserIDIndex retrieves a row from 'public.images' as a Image.
//
// Generated from index 'pk_image'.
func ImageByUserIDIndex(db XODB, userID int, index int) (*Image, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, index, small, url, created_at ` +
		`FROM public.images ` +
		`WHERE user_id = $1 AND index = $2`

	// run query
	XOLog(sqlstr, userID, index)
	i := Image{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, userID, index).Scan(&i.UserID, &i.Index, &i.Small, &i.URL, &i.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &i, nil
}
