// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/lib/pq"
)

// User represents a row from 'public.users'.
type User struct {
	ID         int            `json:"id"`          // id
	Age        int            `json:"age"`         // age
	Birthday   time.Time      `json:"birthday"`    // birthday
	Career     sql.NullString `json:"career"`      // career
	Email      string         `json:"email"`       // email
	StartAge   int            `json:"start_age"`   // start_age
	EndAge     int            `json:"end_age"`     // end_age
	Gender     string         `json:"gender"`      // gender
	Info       sql.NullString `json:"info"`        // info
	FirstName  string         `json:"first_name"`  // first_name
	LastName   string         `json:"last_name"`   // last_name
	LookingFor string         `json:"looking_for"` // looking_for
	School     sql.NullString `json:"school"`      // school
	Password   string         `json:"password"`    // password
	Salt       string         `json:"salt"`        // salt
	CreatedAt  pq.NullTime    `json:"created_at"`  // created_at
	UpdatedAt  pq.NullTime    `json:"updated_at"`  // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the User exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted provides information if the User has been deleted from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the User to the database.
func (u *User) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.users (` +
		`age, birthday, career, email, start_age, end_age, gender, info, first_name, last_name, looking_for, school, password, salt, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, u.Age, u.Birthday, u.Career, u.Email, u.StartAge, u.EndAge, u.Gender, u.Info, u.FirstName, u.LastName, u.LookingFor, u.School, u.Password, u.Salt, u.CreatedAt, u.UpdatedAt)
	err = db.QueryRow(sqlstr, u.Age, u.Birthday, u.Career, u.Email, u.StartAge, u.EndAge, u.Gender, u.Info, u.FirstName, u.LastName, u.LookingFor, u.School, u.Password, u.Salt, u.CreatedAt, u.UpdatedAt).Scan(&u.ID)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Update updates the User in the database.
func (u *User) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.users SET (` +
		`age, birthday, career, email, start_age, end_age, gender, info, first_name, last_name, looking_for, school, password, salt, created_at, updated_at` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16` +
		`) WHERE id = $17`

	// run query
	XOLog(sqlstr, u.Age, u.Birthday, u.Career, u.Email, u.StartAge, u.EndAge, u.Gender, u.Info, u.FirstName, u.LastName, u.LookingFor, u.School, u.Password, u.Salt, u.CreatedAt, u.UpdatedAt, u.ID)
	_, err = db.Exec(sqlstr, u.Age, u.Birthday, u.Career, u.Email, u.StartAge, u.EndAge, u.Gender, u.Info, u.FirstName, u.LastName, u.LookingFor, u.School, u.Password, u.Salt, u.CreatedAt, u.UpdatedAt, u.ID)
	return err
}

// Save saves the User to the database.
func (u *User) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Insert(db)
}

// Upsert performs an upsert for User.
//
// NOTE: PostgreSQL 9.5+ only
func (u *User) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.users (` +
		`id, age, birthday, career, email, start_age, end_age, gender, info, first_name, last_name, looking_for, school, password, salt, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, age, birthday, career, email, start_age, end_age, gender, info, first_name, last_name, looking_for, school, password, salt, created_at, updated_at` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.age, EXCLUDED.birthday, EXCLUDED.career, EXCLUDED.email, EXCLUDED.start_age, EXCLUDED.end_age, EXCLUDED.gender, EXCLUDED.info, EXCLUDED.first_name, EXCLUDED.last_name, EXCLUDED.looking_for, EXCLUDED.school, EXCLUDED.password, EXCLUDED.salt, EXCLUDED.created_at, EXCLUDED.updated_at` +
		`)`

	// run query
	XOLog(sqlstr, u.ID, u.Age, u.Birthday, u.Career, u.Email, u.StartAge, u.EndAge, u.Gender, u.Info, u.FirstName, u.LastName, u.LookingFor, u.School, u.Password, u.Salt, u.CreatedAt, u.UpdatedAt)
	_, err = db.Exec(sqlstr, u.ID, u.Age, u.Birthday, u.Career, u.Email, u.StartAge, u.EndAge, u.Gender, u.Info, u.FirstName, u.LastName, u.LookingFor, u.School, u.Password, u.Salt, u.CreatedAt, u.UpdatedAt)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Delete deletes the User from the database.
func (u *User) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.users WHERE id = $1`

	// run query
	XOLog(sqlstr, u.ID)
	_, err = db.Exec(sqlstr, u.ID)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

// UserByEmail retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_email_key'.
func UserByEmail(db XODB, email string) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, age, birthday, career, email, start_age, end_age, gender, info, first_name, last_name, looking_for, school, password, salt, created_at, updated_at ` +
		`FROM public.users ` +
		`WHERE email = $1`

	// run query
	XOLog(sqlstr, email)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, email).Scan(&u.ID, &u.Age, &u.Birthday, &u.Career, &u.Email, &u.StartAge, &u.EndAge, &u.Gender, &u.Info, &u.FirstName, &u.LastName, &u.LookingFor, &u.School, &u.Password, &u.Salt, &u.CreatedAt, &u.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UserByID retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_pkey'.
func UserByID(db XODB, id int) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, age, birthday, career, email, start_age, end_age, gender, info, first_name, last_name, looking_for, school, password, salt, created_at, updated_at ` +
		`FROM public.users ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&u.ID, &u.Age, &u.Birthday, &u.Career, &u.Email, &u.StartAge, &u.EndAge, &u.Gender, &u.Info, &u.FirstName, &u.LastName, &u.LookingFor, &u.School, &u.Password, &u.Salt, &u.CreatedAt, &u.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &u, nil
}
