// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"

	"github.com/lib/pq"
)

// Match represents a row from 'public.matches'.
type Match struct {
	ID        int         `json:"id"`         // id
	User1ID   int         `json:"user_1_id"`  // user_1_id
	User2ID   int         `json:"user_2_id"`  // user_2_id
	CreatedAt pq.NullTime `json:"created_at"` // created_at
	UpdatedAt pq.NullTime `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Match exists in the database.
func (m *Match) Exists() bool {
	return m._exists
}

// Deleted provides information if the Match has been deleted from the database.
func (m *Match) Deleted() bool {
	return m._deleted
}

// Insert inserts the Match to the database.
func (m *Match) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.matches (` +
		`id, user_1_id, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING user_2_id`

	// run query
	XOLog(sqlstr, m.ID, m.User1ID, m.CreatedAt, m.UpdatedAt)
	err = db.QueryRow(sqlstr, m.ID, m.User1ID, m.CreatedAt, m.UpdatedAt).Scan(&m.User2ID)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Update updates the Match in the database.
func (m *Match) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.matches SET (` +
		`id, user_1_id, created_at, updated_at` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE user_2_id = $5`

	// run query
	XOLog(sqlstr, m.ID, m.User1ID, m.CreatedAt, m.UpdatedAt, m.User2ID)
	_, err = db.Exec(sqlstr, m.ID, m.User1ID, m.CreatedAt, m.UpdatedAt, m.User2ID)
	return err
}

// Save saves the Match to the database.
func (m *Match) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Insert(db)
}

// Upsert performs an upsert for Match.
//
// NOTE: PostgreSQL 9.5+ only
func (m *Match) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.matches (` +
		`id, user_1_id, user_2_id, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (user_2_id) DO UPDATE SET (` +
		`id, user_1_id, user_2_id, created_at, updated_at` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.user_1_id, EXCLUDED.user_2_id, EXCLUDED.created_at, EXCLUDED.updated_at` +
		`)`

	// run query
	XOLog(sqlstr, m.ID, m.User1ID, m.User2ID, m.CreatedAt, m.UpdatedAt)
	_, err = db.Exec(sqlstr, m.ID, m.User1ID, m.User2ID, m.CreatedAt, m.UpdatedAt)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Delete deletes the Match from the database.
func (m *Match) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.matches WHERE user_2_id = $1`

	// run query
	XOLog(sqlstr, m.User2ID)
	_, err = db.Exec(sqlstr, m.User2ID)
	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

// UserByUser1ID returns the User associated with the Match's User1ID (user_1_id).
//
// Generated from foreign key 'matches_user_1_id_fkey'.
func (m *Match) UserByUser1ID(db XODB) (*User, error) {
	return UserByID(db, m.User1ID)
}

// UserByUser2ID returns the User associated with the Match's User2ID (user_2_id).
//
// Generated from foreign key 'matches_user_2_id_fkey'.
func (m *Match) UserByUser2ID(db XODB) (*User, error) {
	return UserByID(db, m.User2ID)
}

// MatchByUser1IDUser2ID retrieves a row from 'public.matches' as a Match.
//
// Generated from index 'pk_match'.
func MatchByUser1IDUser2ID(db XODB, user1id int, user2id int) (*Match, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_1_id, user_2_id, created_at, updated_at ` +
		`FROM public.matches ` +
		`WHERE user_1_id = $1 AND user_2_id = $2`

	// run query
	XOLog(sqlstr, user1id, user2id)
	m := Match{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, user1id, user2id).Scan(&m.ID, &m.User1ID, &m.User2ID, &m.CreatedAt, &m.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &m, nil
}
